const fs = require("fs");
const axios = require("axios");
const path = require("path");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —è–∑—ã–∫–∞–º–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
const langJSON = require("../../public/assets/docs/languages.json");

const RADIO_BROWSER_HOSTS = [
  "https://de1.api.radio-browser.info",
  "https://nl1.api.radio-browser.info",
  "https://fr1.api.radio-browser.info",
  "https://at1.api.radio-browser.info",
];

const LANGS = langJSON.available; // –Ω–∞–ø—Ä–∏–º–µ—Ä ['az', 'ru']
const BASE_URL = "https://legradio.com";
const SITEMAP_PATH = path.join(__dirname, "sitemap-radiostations.xml");
const LIMIT = 500;

// –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ generateSlug (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é —Ä–µ–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
function generateSlug(text) {
  return text
    .toString()
    .toLowerCase()
    .normalize("NFD") // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–æ–≤
    .replace(/[\u0300-\u036f]/g, "") // —É–¥–∞–ª—è–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
    .replace(/[^a-z0-9]+/g, "-") // –∑–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ a-z, 0-9 –Ω–∞ –¥–µ—Ñ–∏—Å
    .replace(/^-+|-+$/g, "") // —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    .replace(/--+/g, "-"); // –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –Ω–∞ –æ–¥–∏–Ω
}

async function fetchAllStations() {
  let stations = [];
  let offset = 0;
  let currentHostIndex = 0;

  while (true) {
    const url = `${RADIO_BROWSER_HOSTS[currentHostIndex]}/json/stations?limit=${LIMIT}&offset=${offset}`;

    try {
      console.log(`Fetching ${url}`);
      const { data } = await axios.get(url, { timeout: 10000 });

      if (!Array.isArray(data)) throw new Error("Invalid response");

      if (data.length === 0) break;

      stations = stations.concat(data);
      offset += LIMIT;
    } catch (err) {
      console.warn(`Host failed: ${RADIO_BROWSER_HOSTS[currentHostIndex]}`);
      currentHostIndex++;

      if (currentHostIndex >= RADIO_BROWSER_HOSTS.length) {
        console.error("‚ùå All Radio Browser hosts are unavailable.");
        break;
      }
    }
  }

  return stations;
}

function generateUrlSet(stations) {
  const now = new Date().toISOString();

  const urls = stations.flatMap((station) => {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º slug –¥–ª—è —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏
    const countrySlug = generateSlug(station.country || "unknown-country");
    const nameSlug = generateSlug(station.name || "unknown-station");
    const stationUUID = station.stationuuid;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π slug —Å uuid
    const slug = `${countrySlug}-${nameSlug}-uuid-${stationUUID}`;

    // –ú–∞—Å—Å–∏–≤ URL –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    const urlsForStation = [];

    // –ê–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    urlsForStation.push(`
  <url>
    <loc>${BASE_URL}/listen/${slug}</loc>
    <lastmod>${now}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>`);

    // –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    LANGS.forEach((lang) => {
      urlsForStation.push(`
  <url>
    <loc>${BASE_URL}/${lang}/listen/${slug}</loc>
    <lastmod>${now}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>`);
    });

    return urlsForStation;
  });

  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls.join("\n")}
</urlset>`;
}

async function generateSitemap() {
  try {
    const stations = await fetchAllStations();

    if (stations.length === 0) {
      console.warn("‚õîÔ∏è No stations fetched.");
      return;
    }

    console.log(`‚úÖ Fetched ${stations.length} stations.`);

    const xmlContent = generateUrlSet(stations);
    fs.writeFileSync(SITEMAP_PATH, xmlContent.trim());

    console.log(`üéâ Sitemap generated at: ${SITEMAP_PATH}`);
  } catch (error) {
    console.error("‚ùå Sitemap generation error:", error.message);
  }
}

generateSitemap();
